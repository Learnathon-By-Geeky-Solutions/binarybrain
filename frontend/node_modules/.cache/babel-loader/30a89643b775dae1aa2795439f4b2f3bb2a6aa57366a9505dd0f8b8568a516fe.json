{"ast":null,"code":"import api from './api';\nexport const courseService = {\n  // Get all courses (admin only)\n  getAllCourses: async () => {\n    const response = await api.get('/api/v1/private/course');\n    return response.data;\n  },\n  // Get courses by author ID\n  getCoursesByAuthor: async authorId => {\n    const response = await api.get(`/api/v1/private/course/author/${authorId}`);\n    return response.data;\n  },\n  // Get course by ID\n  getCourseById: async id => {\n    const response = await api.get(`/api/v1/private/course/${id}`);\n    return response.data;\n  },\n  // Create new course\n  createCourse: async courseData => {\n    const response = await api.post('/api/v1/private/course', courseData);\n    return response.data;\n  },\n  // Update course\n  updateCourse: async courseData => {\n    const response = await api.put(`/api/v1/private/course/${courseData.id}`, courseData);\n    return response.data;\n  },\n  // Delete course\n  deleteCourse: async id => {\n    await api.delete(`/api/v1/private/course/${id}`);\n  },\n  // Get courses by IDs\n  getCoursesByIds: async courseIds => {\n    const response = await api.get('/api/v1/private/course/by-ids', {\n      params: {\n        courseIds: courseIds.join(',')\n      }\n    });\n    return response.data;\n  },\n  // Add task to course\n  addTaskToCourse: async (courseId, taskId) => {\n    const response = await api.put(`/api/v1/private/course/${courseId}/add-task/${taskId}`);\n    return response.data;\n  },\n  // Remove task from course\n  removeTaskFromCourse: async (courseId, taskId) => {\n    const response = await api.put(`/api/v1/private/course/${courseId}/remove-task/${taskId}`);\n    return response.data;\n  },\n  // Get all tasks from a course\n  getTasksFromCourse: async courseId => {\n    const response = await api.get(`/api/v1/private/course/${courseId}/tasks`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","courseService","getAllCourses","response","get","data","getCoursesByAuthor","authorId","getCourseById","id","createCourse","courseData","post","updateCourse","put","deleteCourse","delete","getCoursesByIds","courseIds","params","join","addTaskToCourse","courseId","taskId","removeTaskFromCourse","getTasksFromCourse"],"sources":["/workspaces/binarybrain/frontend/src/services/courseService.ts"],"sourcesContent":["import api from './api';\nimport { Course, CreateCourseDto, UpdateCourseDto, CourseFilters } from '../interfaces/course';\n\nexport const courseService = {\n    // Get all courses (admin only)\n    getAllCourses: async (): Promise<Course[]> => {\n        const response = await api.get<Course[]>('/api/v1/private/course');\n        return response.data;\n    },\n\n    // Get courses by author ID\n    getCoursesByAuthor: async (authorId: number): Promise<Course[]> => {\n        const response = await api.get<Course[]>(`/api/v1/private/course/author/${authorId}`);\n        return response.data;\n    },\n\n    // Get course by ID\n    getCourseById: async (id: number): Promise<Course> => {\n        const response = await api.get<Course>(`/api/v1/private/course/${id}`);\n        return response.data;\n    },\n\n    // Create new course\n    createCourse: async (courseData: CreateCourseDto): Promise<Course> => {\n        const response = await api.post<Course>('/api/v1/private/course', courseData);\n        return response.data;\n    },\n\n    // Update course\n    updateCourse: async (courseData: UpdateCourseDto): Promise<Course> => {\n        const response = await api.put<Course>(`/api/v1/private/course/${courseData.id}`, courseData);\n        return response.data;\n    },\n\n    // Delete course\n    deleteCourse: async (id: number): Promise<void> => {\n        await api.delete(`/api/v1/private/course/${id}`);\n    },\n\n    // Get courses by IDs\n    getCoursesByIds: async (courseIds: number[]): Promise<Course[]> => {\n        const response = await api.get<Course[]>('/api/v1/private/course/by-ids', {\n            params: { courseIds: courseIds.join(',') }\n        });\n        return response.data;\n    },\n\n    // Add task to course\n    addTaskToCourse: async (courseId: number, taskId: number): Promise<Course> => {\n        const response = await api.put<Course>(`/api/v1/private/course/${courseId}/add-task/${taskId}`);\n        return response.data;\n    },\n\n    // Remove task from course\n    removeTaskFromCourse: async (courseId: number, taskId: number): Promise<Course> => {\n        const response = await api.put<Course>(`/api/v1/private/course/${courseId}/remove-task/${taskId}`);\n        return response.data;\n    },\n\n    // Get all tasks from a course\n    getTasksFromCourse: async (courseId: number): Promise<any[]> => {\n        const response = await api.get<any[]>(`/api/v1/private/course/${courseId}/tasks`);\n        return response.data;\n    }\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAGvB,OAAO,MAAMC,aAAa,GAAG;EACzB;EACAC,aAAa,EAAE,MAAAA,CAAA,KAA+B;IAC1C,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAW,wBAAwB,CAAC;IAClE,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAC,kBAAkB,EAAE,MAAOC,QAAgB,IAAwB;IAC/D,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAW,iCAAiCG,QAAQ,EAAE,CAAC;IACrF,OAAOJ,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAG,aAAa,EAAE,MAAOC,EAAU,IAAsB;IAClD,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAS,0BAA0BK,EAAE,EAAE,CAAC;IACtE,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAK,YAAY,EAAE,MAAOC,UAA2B,IAAsB;IAClE,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACY,IAAI,CAAS,wBAAwB,EAAED,UAAU,CAAC;IAC7E,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAQ,YAAY,EAAE,MAAOF,UAA2B,IAAsB;IAClE,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACc,GAAG,CAAS,0BAA0BH,UAAU,CAACF,EAAE,EAAE,EAAEE,UAAU,CAAC;IAC7F,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAU,YAAY,EAAE,MAAON,EAAU,IAAoB;IAC/C,MAAMT,GAAG,CAACgB,MAAM,CAAC,0BAA0BP,EAAE,EAAE,CAAC;EACpD,CAAC;EAED;EACAQ,eAAe,EAAE,MAAOC,SAAmB,IAAwB;IAC/D,MAAMf,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAW,+BAA+B,EAAE;MACtEe,MAAM,EAAE;QAAED,SAAS,EAAEA,SAAS,CAACE,IAAI,CAAC,GAAG;MAAE;IAC7C,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAgB,eAAe,EAAE,MAAAA,CAAOC,QAAgB,EAAEC,MAAc,KAAsB;IAC1E,MAAMpB,QAAQ,GAAG,MAAMH,GAAG,CAACc,GAAG,CAAS,0BAA0BQ,QAAQ,aAAaC,MAAM,EAAE,CAAC;IAC/F,OAAOpB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAmB,oBAAoB,EAAE,MAAAA,CAAOF,QAAgB,EAAEC,MAAc,KAAsB;IAC/E,MAAMpB,QAAQ,GAAG,MAAMH,GAAG,CAACc,GAAG,CAAS,0BAA0BQ,QAAQ,gBAAgBC,MAAM,EAAE,CAAC;IAClG,OAAOpB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAoB,kBAAkB,EAAE,MAAOH,QAAgB,IAAqB;IAC5D,MAAMnB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAQ,0BAA0BkB,QAAQ,QAAQ,CAAC;IACjF,OAAOnB,QAAQ,CAACE,IAAI;EACxB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
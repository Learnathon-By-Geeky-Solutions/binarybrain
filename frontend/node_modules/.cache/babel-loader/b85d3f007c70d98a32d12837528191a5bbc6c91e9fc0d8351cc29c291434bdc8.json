{"ast":null,"code":"import api from './api';\nexport const classroomService = {\n  // Get all classrooms (admin only)\n  getAllClassrooms: async () => {\n    const response = await api.get('/api/v1/private/classroom');\n    return response.data;\n  },\n  // Get classroom by ID\n  getClassroomById: async id => {\n    const response = await api.get(`/api/v1/private/classroom/${id}`);\n    return response.data;\n  },\n  // Get classrooms by teacher ID\n  getClassroomsByTeacher: async teacherId => {\n    const response = await api.get(`/api/v1/private/classroom/by-teacher/${teacherId}`);\n    return response.data;\n  },\n  // Get classrooms by student ID\n  getClassroomsByStudent: async studentId => {\n    const response = await api.get(`/api/v1/private/classroom/by-student/${studentId}`);\n    return response.data;\n  },\n  // Create new classroom\n  createClassroom: async classroomData => {\n    const response = await api.post('/api/v1/private/classroom', classroomData);\n    return response.data;\n  },\n  // Update classroom\n  updateClassroom: async (id, classroomData) => {\n    const response = await api.put(`/api/v1/private/classroom/${id}`, classroomData);\n    return response.data;\n  },\n  // Delete classroom\n  deleteClassroom: async id => {\n    await api.delete(`/api/v1/private/classroom/${id}`);\n  },\n  // Add student to classroom\n  addStudent: async (classroomId, studentId) => {\n    const response = await api.put(`/api/v1/private/classroom/${classroomId}/add-student/${studentId}`);\n    return response.data;\n  },\n  // Remove student from classroom\n  removeStudent: async (classroomId, studentId) => {\n    const response = await api.delete(`/api/v1/private/classroom/${classroomId}/remove-student/${studentId}`);\n    return response.data;\n  },\n  // Add course to classroom\n  addCourse: async (classroomId, courseId) => {\n    const response = await api.put(`/api/v1/private/classroom/${classroomId}/add-course/${courseId}`);\n    return response.data;\n  },\n  // Remove course from classroom\n  removeCourse: async (classroomId, courseId) => {\n    const response = await api.delete(`/api/v1/private/classroom/${classroomId}/remove-course/${courseId}`);\n    return response.data;\n  },\n  // Get classroom courses\n  getClassroomCourses: async classroomId => {\n    const response = await api.get(`/api/v1/private/classroom/${classroomId}/courses`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","classroomService","getAllClassrooms","response","get","data","getClassroomById","id","getClassroomsByTeacher","teacherId","getClassroomsByStudent","studentId","createClassroom","classroomData","post","updateClassroom","put","deleteClassroom","delete","addStudent","classroomId","removeStudent","addCourse","courseId","removeCourse","getClassroomCourses"],"sources":["/workspaces/binarybrain/frontend/src/services/classroomService.ts"],"sourcesContent":["import api from './api';\nimport { Classroom, CreateClassroomDto, UpdateClassroomDto } from '../interfaces/classroom';\n\nexport const classroomService = {\n    // Get all classrooms (admin only)\n    getAllClassrooms: async (): Promise<Classroom[]> => {\n        const response = await api.get<Classroom[]>('/api/v1/private/classroom');\n        return response.data;\n    },\n\n    // Get classroom by ID\n    getClassroomById: async (id: number): Promise<Classroom> => {\n        const response = await api.get<Classroom>(`/api/v1/private/classroom/${id}`);\n        return response.data;\n    },\n\n    // Get classrooms by teacher ID\n    getClassroomsByTeacher: async (teacherId: number): Promise<Classroom[]> => {\n        const response = await api.get<Classroom[]>(`/api/v1/private/classroom/by-teacher/${teacherId}`);\n        return response.data;\n    },\n\n    // Get classrooms by student ID\n    getClassroomsByStudent: async (studentId: number): Promise<Classroom[]> => {\n        const response = await api.get<Classroom[]>(`/api/v1/private/classroom/by-student/${studentId}`);\n        return response.data;\n    },\n\n    // Create new classroom\n    createClassroom: async (classroomData: CreateClassroomDto): Promise<Classroom> => {\n        const response = await api.post<Classroom>('/api/v1/private/classroom', classroomData);\n        return response.data;\n    },\n\n    // Update classroom\n    updateClassroom: async (id: number, classroomData: UpdateClassroomDto): Promise<Classroom> => {\n        const response = await api.put<Classroom>(`/api/v1/private/classroom/${id}`, classroomData);\n        return response.data;\n    },\n\n    // Delete classroom\n    deleteClassroom: async (id: number): Promise<void> => {\n        await api.delete(`/api/v1/private/classroom/${id}`);\n    },\n\n    // Add student to classroom\n    addStudent: async (classroomId: number, studentId: number): Promise<Classroom> => {\n        const response = await api.put<Classroom>(\n            `/api/v1/private/classroom/${classroomId}/add-student/${studentId}`\n        );\n        return response.data;\n    },\n\n    // Remove student from classroom\n    removeStudent: async (classroomId: number, studentId: number): Promise<Classroom> => {\n        const response = await api.delete<Classroom>(\n            `/api/v1/private/classroom/${classroomId}/remove-student/${studentId}`\n        );\n        return response.data;\n    },\n\n    // Add course to classroom\n    addCourse: async (classroomId: number, courseId: number): Promise<Classroom> => {\n        const response = await api.put<Classroom>(\n            `/api/v1/private/classroom/${classroomId}/add-course/${courseId}`\n        );\n        return response.data;\n    },\n\n    // Remove course from classroom\n    removeCourse: async (classroomId: number, courseId: number): Promise<Classroom> => {\n        const response = await api.delete<Classroom>(\n            `/api/v1/private/classroom/${classroomId}/remove-course/${courseId}`\n        );\n        return response.data;\n    },\n\n    // Get classroom courses\n    getClassroomCourses: async (classroomId: number): Promise<any[]> => {\n        const response = await api.get<any[]>(`/api/v1/private/classroom/${classroomId}/courses`);\n        return response.data;\n    }\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAGvB,OAAO,MAAMC,gBAAgB,GAAG;EAC5B;EACAC,gBAAgB,EAAE,MAAAA,CAAA,KAAkC;IAChD,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAc,2BAA2B,CAAC;IACxE,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAC,gBAAgB,EAAE,MAAOC,EAAU,IAAyB;IACxD,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAY,6BAA6BG,EAAE,EAAE,CAAC;IAC5E,OAAOJ,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAG,sBAAsB,EAAE,MAAOC,SAAiB,IAA2B;IACvE,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAc,wCAAwCK,SAAS,EAAE,CAAC;IAChG,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAK,sBAAsB,EAAE,MAAOC,SAAiB,IAA2B;IACvE,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAc,wCAAwCO,SAAS,EAAE,CAAC;IAChG,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAO,eAAe,EAAE,MAAOC,aAAiC,IAAyB;IAC9E,MAAMV,QAAQ,GAAG,MAAMH,GAAG,CAACc,IAAI,CAAY,2BAA2B,EAAED,aAAa,CAAC;IACtF,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAU,eAAe,EAAE,MAAAA,CAAOR,EAAU,EAAEM,aAAiC,KAAyB;IAC1F,MAAMV,QAAQ,GAAG,MAAMH,GAAG,CAACgB,GAAG,CAAY,6BAA6BT,EAAE,EAAE,EAAEM,aAAa,CAAC;IAC3F,OAAOV,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAY,eAAe,EAAE,MAAOV,EAAU,IAAoB;IAClD,MAAMP,GAAG,CAACkB,MAAM,CAAC,6BAA6BX,EAAE,EAAE,CAAC;EACvD,CAAC;EAED;EACAY,UAAU,EAAE,MAAAA,CAAOC,WAAmB,EAAET,SAAiB,KAAyB;IAC9E,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACgB,GAAG,CAC1B,6BAA6BI,WAAW,gBAAgBT,SAAS,EACrE,CAAC;IACD,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAgB,aAAa,EAAE,MAAAA,CAAOD,WAAmB,EAAET,SAAiB,KAAyB;IACjF,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACkB,MAAM,CAC7B,6BAA6BE,WAAW,mBAAmBT,SAAS,EACxE,CAAC;IACD,OAAOR,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAiB,SAAS,EAAE,MAAAA,CAAOF,WAAmB,EAAEG,QAAgB,KAAyB;IAC5E,MAAMpB,QAAQ,GAAG,MAAMH,GAAG,CAACgB,GAAG,CAC1B,6BAA6BI,WAAW,eAAeG,QAAQ,EACnE,CAAC;IACD,OAAOpB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAmB,YAAY,EAAE,MAAAA,CAAOJ,WAAmB,EAAEG,QAAgB,KAAyB;IAC/E,MAAMpB,QAAQ,GAAG,MAAMH,GAAG,CAACkB,MAAM,CAC7B,6BAA6BE,WAAW,kBAAkBG,QAAQ,EACtE,CAAC;IACD,OAAOpB,QAAQ,CAACE,IAAI;EACxB,CAAC;EAED;EACAoB,mBAAmB,EAAE,MAAOL,WAAmB,IAAqB;IAChE,MAAMjB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAQ,6BAA6BgB,WAAW,UAAU,CAAC;IACzF,OAAOjB,QAAQ,CAACE,IAAI;EACxB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
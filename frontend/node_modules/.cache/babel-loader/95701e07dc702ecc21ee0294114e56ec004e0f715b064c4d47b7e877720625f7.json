{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { authService } from '../../services/authService';\nimport { clearTokens } from '../../utils/auth';\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null\n};\nexport const login = createAsyncThunk('auth/login', async credentials => {\n  await authService.login(credentials);\n  const user = await authService.getCurrentUser();\n  return user;\n});\nexport const register = createAsyncThunk('auth/register', async userData => {\n  const user = await authService.register(userData);\n  return user;\n});\nexport const getCurrentUser = createAsyncThunk('auth/getCurrentUser', async () => {\n  const user = await authService.getCurrentUser();\n  return user;\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.error = null;\n      clearTokens();\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Login\n    .addCase(login.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n      state.error = null;\n    }).addCase(login.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Login failed';\n    })\n    // Register\n    .addCase(register.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.loading = false;\n      state.error = null;\n    }).addCase(register.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Registration failed';\n    })\n    // Get Current User\n    .addCase(getCurrentUser.pending, state => {\n      state.loading = true;\n    }).addCase(getCurrentUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    }).addCase(getCurrentUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch user';\n    });\n  }\n});\nexport const {\n  logout,\n  clearError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","clearTokens","initialState","user","loading","error","login","credentials","getCurrentUser","register","userData","authSlice","name","reducers","logout","state","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["/workspaces/binarybrain/frontend/src/store/slices/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { User, AuthRequest, UserDto } from '../../interfaces/auth';\nimport { authService } from '../../services/authService';\nimport { clearTokens } from '../../utils/auth';\n\ninterface AuthState {\n    user: User | null;\n    loading: boolean;\n    error: string | null;\n}\n\nconst initialState: AuthState = {\n    user: null,\n    loading: false,\n    error: null,\n};\n\nexport const login = createAsyncThunk(\n    'auth/login',\n    async (credentials: AuthRequest) => {\n        await authService.login(credentials);\n        const user = await authService.getCurrentUser();\n        return user;\n    }\n);\n\nexport const register = createAsyncThunk(\n    'auth/register',\n    async (userData: UserDto) => {\n        const user = await authService.register(userData);\n        return user;\n    }\n);\n\nexport const getCurrentUser = createAsyncThunk(\n    'auth/getCurrentUser',\n    async () => {\n        const user = await authService.getCurrentUser();\n        return user;\n    }\n);\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        logout: (state) => {\n            state.user = null;\n            state.error = null;\n            clearTokens();\n        },\n        clearError: (state) => {\n            state.error = null;\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            // Login\n            .addCase(login.pending, (state) => {\n                state.loading = true;\n                state.error = null;\n            })\n            .addCase(login.fulfilled, (state, action: PayloadAction<User>) => {\n                state.loading = false;\n                state.user = action.payload;\n                state.error = null;\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message || 'Login failed';\n            })\n            // Register\n            .addCase(register.pending, (state) => {\n                state.loading = true;\n                state.error = null;\n            })\n            .addCase(register.fulfilled, (state, action: PayloadAction<User>) => {\n                state.loading = false;\n                state.error = null;\n            })\n            .addCase(register.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message || 'Registration failed';\n            })\n            // Get Current User\n            .addCase(getCurrentUser.pending, (state) => {\n                state.loading = true;\n            })\n            .addCase(getCurrentUser.fulfilled, (state, action: PayloadAction<User>) => {\n                state.loading = false;\n                state.user = action.payload;\n            })\n            .addCase(getCurrentUser.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message || 'Failed to fetch user';\n            });\n    },\n});\n\nexport const { logout, clearError } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}